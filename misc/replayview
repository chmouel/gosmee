#!/usr/bin/env bash
# This script provides an interactive way to browse, preview,
# and run replay files (typically shell scripts and their associated JSON)
# generated by the gosmee. It supports fuzzy finding, previewing event
# metadata, copying paths, symlinking, and running replays.
#
# Tools required:
#
# jq, fzf, fd
#
# Optional: fx (for interactive mode)
set -eufo pipefail

interactive=
symlink=
yank=
launch=
directToController=
dir=/tmp/save
targetlink=/tmp/run.sh

echo_magenta() {
  echo -e "\033[35m$*\033[0m"
}

echo_red() {
  echo -e "\033[31m$*\033[0m"
}

echo_yellow() {
  echo -e "\033[33m$*\033[0m"
}

echo_white_bold() {
  echo -e "\033[1;37m$*\033[0m"
}

show_help() {
  cat <<EOF
$(basename $(readlink -f $0)) - view gosme replay files

Usage: $(basename $(readlink -f $0)) [options]

This tool helps you interactively browse and manage replay files (shell scripts
and their JSON payloads)
produced by gosmee. It uses fzf for fuzzy finding and provides previews of
event metadata and headers.

Typical workflow:
  1. Run the script without arguments to open an interactive selector for
     replay files.
  2. Use the preview window to inspect event details and headers.
  3. Choose actions like copying the file path, creating a symlink, running the
     replay, or viewing JSON interactively.
  4. By default the script will be saved to ${targetlink}. Use this to script
     to replay the event at will.

Options:
  -P <file>    Show a preview of the json and file for fzf
  -t <file>    The target link to use (default: /tmp/run.sh)
  -l <name>    Make a symlink
  -d <dir>     Use a different directory than /tmp/replay
  -y           Copy to clipboard the chosen one
  -r           Run the chosen one
  -c           Do the command directly to the controller
  -i           Interactive mode (requires 'fx' for JSON viewing)
  -h           Show this help

Author: Chmouel Boudjnah <chmouel@chmouel.com> - @chmouel
EOF
}

function zecopier() {
  if command -v "pbcopy" >/dev/null 2>&1; then
    pbcopy </dev/stdin
  elif command -v "wl-copy" >/dev/null 2>&1; then
    wl-copy </dev/stdin
  elif command -v "xclip" >/dev/null 2>&1; then
    xclip -selection clipboard
  else
    echo "No clipboard utility found." >&2
    return 1
  fi
}

function check_tools() {
  for tool in fzf fd jq; do
    if ! command -v "${tool}" >/dev/null 2>&1; then
      echo "You need to install the tool ${tool} before using this script."
      exit 1
    fi
  done
}

function replayview() {
  local initial=
  [[ -n ${1:-} ]] && initial="-q ${1}"
  local output
  output=$(fd -0 .sh ${dir} | xargs -0 ls -1tr | fzf -1 --tac --reverse --preview="${0} -P {}" --exact --bind alt-n:next-history,alt-p:previous-history,ctrl-j:preview-down,ctrl-k:preview-up,ctrl-n:down,ctrl-p:up,ctrl-d:preview-page-down,ctrl-u:preview-page-up --preview-window 'down,70%:wrap' ${initial})
  [[ -z $output ]] && return
  [[ -n ${symlink} ]] && {
    symlink=/tmp/${symlink}.sh
    ln -fvs ${output} "${symlink}"
    return
  }
  [[ -n $yank ]] && {
    echo $output | zecopier
    return
  }

  [[ -n ${interactive} ]] && {
    fx ${output/.sh/.json}
    return
  }
  arg="\${1:--l}"
  [[ -n $directToController ]] && arg='"${@}"'
  cat <<EOF >${targetlink}
#!/usr/bin/env bash
set -eufo pipefail
arg="$arg"
[[ \${arg} == "-d" ]] && arg=""
$output \$arg
EOF
  chmod +x ${targetlink}
  echo "Linked $output to ${targetlink}"
  if [[ -n $launch ]]; then
    bash ${output}
  fi
}

while getopts "t:il:rnyhcd:P:" opt; do
  case $opt in
  t) ## Target link
    targetlink=$OPTARG
    ;;
  P) ## Show a preview of the json and file for fzf
    arg=$OPTARG
    j="${arg%.sh}.json"
    [[ -e ${j} ]] || exit
    output=$(grep -Eo "X-((Github|Gitlab)-Event|Event-Key): ([^']*)" "${arg}")
    left=${output%%:*}
    right=${output#*: }
    icon="ðŸ”—"
    action=
    case ${left} in
    *Github*)
      icon="$(echo_magenta îª„) Github"
      if [[ ${right} == "pull_request" ]]; then
        action=":$(jq -r '.action' ${j})"
      fi
      ;;
    *Gitlab*) icon="$(echo_magenta îŸ«) Gitlab" ;;
    *Event-Key*) icon="$(echo_magenta îœƒ) Bitbucket" ;;
    *) icon="ðŸ”— ${left}" ;;
    esac

    echo ${icon} $(echo_red ${right}${action})

    mapfile -t headers < <(grep -oE -- "-H '[^'\"]*" "${arg}" | sed "s/-H '//" | sort -n)
    for header in "${headers[@]}"; do
      left=${header%%:*}
      right=${header#*: }
      echo "ï’‹ $(echo_yellow ${left}) $(echo_white_bold ${right})"
    done

    echo
    jq -C . ${j}
    grep "curl" ${arg}
    ;;
  l) ## Make a symlink
    symlink=$OPTARG
    ;;
  d) ## Use a different directory than /tmp/replay
    dir=$OPTARG
    ;;
  y) ## Copy to clipboard the chosen one
    yank=yes
    ;;
  r) ## Run the chosen one
    launch=yes ;;
  c) ## Do the command directly to the controller
    directToController=yes ;;
  i) ## Interactive mode
    type -p fx >/dev/null 2>/dev/null || {
      echo "need fx (https://fx.wtf/) in path for interactiveness" >&2
      exit 1
    }
    interactive=true
    ;;
  h) ## Show this help
    show_help
    exit 0
    ;;
  *)
    echo "unknown option: -$OPTARG" >&2
    show_help
    exit 1
    ;;
  esac
done
shift $((OPTIND - 1))

[[ -d $dir ]] || dir=/tmp/replay
[[ -d $dir ]] || {
  echo "cannot find directory $dir or /tmp/replay" >&2
  exit 1
}
replayview "$@"
